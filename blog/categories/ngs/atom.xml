<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NGS | Life with Bioinformatics]]></title>
  <link href="http://yuifu.github.io/blog/categories/ngs/atom.xml" rel="self"/>
  <link href="http://yuifu.github.io/"/>
  <updated>2013-08-06T17:16:38+09:00</updated>
  <id>http://yuifu.github.io/</id>
  <author>
    <name><![CDATA[yuifu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cufflinks-library-norm-method]]></title>
    <link href="http://yuifu.github.io/blog/2013/07/25/cufflinks-library-norm-method/"/>
    <updated>2013-07-25T15:43:00+09:00</updated>
    <id>http://yuifu.github.io/blog/2013/07/25/cufflinks-library-norm-method</id>
    <content type="html"><![CDATA[<p>この記事では，CufflinksおよびCuffdiffの<code>--library-norm-method</code>オプションで指定できる，ライブラリサイズの正規化法の違いについて述べています．</p>

<h2>言葉の説明</h2>

<ul>
<li>ライブラリ library: サンプルのこと．</li>
<li>ライブラリサイズ library size: ライブラリのリード数のこと．Sequecning depthともいう．</li>
<li>size factor（scaling factor）: 各ライブラリのFPKMやフラグメントカウントを割るための値．
各ライブラリについて計算される値です．正規化因子とかスケーリング因子とか呼ばれたりします．<br/>
通常，他のライブラリに比べてFPKMやフラグメントカウントが大きいライブラリのスケーリング因子は，大きくなります．</li>
<li>フラグメント fragment: ペアエンドで読んだときの2つのreadを一組にした概念．</li>
</ul>


<blockquote><p>In paired-end RNA-Seq experiments, fragments are sequenced from both ends, providing two reads for each fragment.    <a href="http://cufflinks.cbcb.umd.edu/howitworks.html">Cufflinks RNA-Seq analysis tools &ndash; Background</a></p></blockquote>

<p>-FPKM: Fragments Per Kilobase of exon per Million fragments mapped (FPKM) のこと．
<a href="http://cufflinks.cbcb.umd.edu/howitworks.html#hqua">Cufflinks RNA-Seq analysis tools &ndash; Background</a>を参照のこと．</p>

<h2>library-norm-method</h2>

<p><code>classic-fpkm</code>，<code>geometric</code>，<code>quartile</code>の3種類があります．</p>

<h3>classic-fpkm</h3>

<ul>
<li>size factorは1．つまり，FPKMやフラグメントカウントに対してスケーリングを行わない</li>
<li>Cufflinksでのみ使用可能</li>
</ul>


<h3>geometric</h3>

<ul>
<li>まず，各遺伝子について，フラグメントカウントの全ライブラリについての幾何平均を求める．<br/>
次に，その幾何平均に対する各ライブラリでのフラグメントカウントの比を計算する．<br/>
最後に，その比の全遺伝子についてのメディアンを計算する．このメディアンをsize factorとして，FPKMとフラグメントカウントのスケーリングを行う．</li>
<li>幾何平均 geometric mean</li>
<li>Cuffdiffでのデフォルト</li>
<li><a href="http://genomebiology.com/2010/11/10/R106">Anders and Huber (Genome Biology, 2010)</a> を参照</li>
<li>DESeqで使われているのと同じもの</li>
</ul>


<p><script type="math/tex; mode=display">
\hat{s}<em>{j} = {\rm median}</em>{i} \frac{ k<em>{ij} } { \left (\prod</em>{v=1}^{m} k_{iv}  \right )^{1/m} }
</script></p>

<p><code>j</code>: ライブラリ(j=1,&hellip;,m)
<code>i</code>: 遺伝子
<code>k_{ij}</code>: ライブラリ<code>j</code>における遺伝子<code>i</code></p>

<h3>quartile</h3>

<ul>
<li>各ライブラリでのフラグメントカウントの第３四分位点の，全てのライブラリについての第３四分位点の平均値に対する比をsize factorとして，FPKMとフラグメントカウントのスケーリングを行う</li>
<li>いわゆるquantile normalization とは全く異なる</li>
</ul>


<p><script type="math/tex; mode=display"></p>

<p>\hat{s}<em>{j} =  \frac{ {\rm 3Q}</em>{i} (k<em>{ij}) } { \sum</em>{v=1}^{m} {\rm 3Q}<em>{i} (k</em>{iv}) }
</script></p>

<p><code>3Q_{i}</code>: k_{i,j} の全遺伝子についての分布から，第３四分位点を選ぶ関数だと思ってください．</p>

<h2>参考</h2>

<p><a href="http://cufflinks.cbcb.umd.edu/manual.html">Cufflinks RNA-Seq analysis tools &ndash; User&rsquo;s Manual</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SAM/BAMからマルチリードを除く方法]]></title>
    <link href="http://yuifu.github.io/blog/2013/07/19/remove-multi-reads/"/>
    <updated>2013-07-19T11:45:00+09:00</updated>
    <id>http://yuifu.github.io/blog/2013/07/19/remove-multi-reads</id>
    <content type="html"><![CDATA[<h2>マルチリードについて</h2>

<p>ゲノム上の複数箇所にマップされたリードをmultiple mapped reads, multi-reads, reads with multiple hits などと呼びます．
もしくは，一つのリードに対して複数のアラインメントが出力されるもの，とも言えます．</p>

<p>このマルチリードは，しばしば解析の前に除かれます．では，どうやって除いたらいいでしょうか．</p>

<h2>MAPQを使う</h2>

<p>MAPQ（SAM/BAMの５列目）が適切にセットされているなら，これを使うことができます．
適切というのは，ユニークなアラインメントでMAPQが50，アラインメントが２つだとMAPQが3，アラインメントが3以上だとMAPQが0に設定されている状態です．</p>

<p>このとき，<code>samtools view -q</code>を使って，以下のように書けます．</p>

<blockquote><p>-q INT      Skip alignments with MAPQ smaller than INT [0]</p></blockquote>

<p><code>
samtools view -q 4 hoge.bam &gt; hoge.uniq.bam
</code></p>

<h2>NHを使う</h2>

<p>NHタグは，SAM/BAMファイルに，あるリードに対するアラインメントがいくつ入力されたかを <code>NH:i:[0-9]+</code>という形式で記録しています．</p>

<blockquote><p>NH      i      Number of reported alignments that contains the query in the current record</p></blockquote>

<p>（<a href="http://samtools.sourceforge.net/SAM1.pdf">The SAM Format Specification (PDF)</a>）</p>

<p>そのため，スクリプト言語で（私はNHの分布が知りたかったので，こちらの方法を使ってました）．
以下は，Perlで書いた例です．</p>

<p>``` perl
open(I, &ldquo;hoge.bam&rdquo;);
open(O, &ldquo;> hoge.uniq.bam&rdquo;);</p>

<p>while(<I>){</p>

<pre><code> if(/^@/){ # header
      print O $_;
      next;
 }
 if(/NH:i:([0-9]+)/){  # NH: Number of reported alignments that contains the query in the current record
      if($1 == 1){
           print O $_;
      }
 }
</code></pre>

<p>}
close(I);
close(O);</p>

<p>```</p>

<h2>FLAGは使えなさそう</h2>

<p>掲示板などを読んでいるとFLAG（SAM/BAMの２列目）のビットを使って，すなわち<code>samtools view -F ***</code>を使う方法が提案されることがしばしばあります．
これはおそらく<code>0x100</code>(secondary alignment)のことを指しているのだと思うのですが，以下の例で示す通り，マルチヒットのリードを除くには不適切です．</p>

<p>=====</p>

<p><code>
read1      339     chr1    181938  3       2M107N99M       =       181891  -255    ACCGGAGGATGTTGGGATGGCAGAGGCGGTTCATGAGCTGCACCTCCCGCAGCATGTTGGCCTTGTTGCTCGCCAGCGTGTTCATCTTCAGCGCCATCACC   BDDDCACCC&lt;&lt;3DDDDCDDDDDD@@9BBCCDCC@49CCCCA&lt;DB?CDFFFFHHHHJJJJJIIJIJJJJJJJGJJJJIJJJJJJIJJJJHHHHHFFEDD?@B   AS:i:0  XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:101        YT:Z:UU XS:A:-  NH:i:2  CC:Z:=  CP:i:182045     HI:i:0:0
read1      83      chr1    182045  3       101M    =       181891  -255    ACCGGAGGATGTTGGGATGGCAGAGGCGGTTCATGAGCTGCACCTCCCGCAGCATGTTGGCCTTGTTGCTCGCCAGCGTGTTCATCTTCAGCGCCATCACC   BDDDCACCC&lt;&lt;3DDDDCDDDDDD@@9BBCCDCC@49CCCCA&lt;DB?CDFFFFHHHHJJJJJIIJIJJJJJJJGJJJJIJJJJJJIJJJJHHHHHFFEDD?@B   AS:i:0  XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:101        YT:Z:UU NH:i:2  HI:i:11
</code></p>

<p>これは，ペアエンドのリードをTopHatでアラインメントして得られた，あるリード <code>read1</code>に対する2つのアラインメントです．
どちらも<code>NH:i:2</code>であることから，各リードに対して，ファイル中に2つのアラインメントが出力されていることがわかります．これは，MAPQ（５列目）が<code>3</code>になっていることからも分かります．
一方で，FLAG（２列目）が，read1では<code>339</code>（0x1, 0x2, 0x10, 0x40, 0x100）で，read2では<code>83</code>（0x1, 0x2, 0x10, 0x20）となっています．２つのアラインメントにEdit distanceなどで違いがないにも関わらず，片方だけに<code>0x100</code>が付いています．</p>

<p>つまり，マルチヒットのリードを除くという目的には不適切だと言えます．</p>

<h2>参考</h2>

<ul>
<li><a href="http://seqanswers.com/forums/showthread.php?t=19491">Remove reads which are not uniquely mapped &ndash; SEQanswers</a></li>
</ul>


<h2>（参考）FLAGのビットの意味</h2>

<p><a href="http://samtools.sourceforge.net/SAM1.pdf">The SAM Format Specification (PDF)</a></p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Bit </th>
<th align="right"> Description  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> 0x1 </td>
<td align="right"> template having multiple segments in sequencing |</td>
</tr>
<tr>
<td></td>
<td align="left"> 0x2 </td>
<td align="right"> each segment properly aligned according to the aligner |</td>
</tr>
<tr>
<td></td>
<td align="left"> 0x4 </td>
<td align="right"> segment unmapped |</td>
</tr>
<tr>
<td></td>
<td align="left"> 0x8 </td>
<td align="right"> next segment in the template unmapped |</td>
</tr>
<tr>
<td></td>
<td align="left"> 0x10 </td>
<td align="right"> SEQ being reverse complemented |</td>
</tr>
<tr>
<td></td>
<td align="left"> 0x20 </td>
<td align="right"> SEQ of the next segment in the template being reversed</td>
</tr>
<tr>
<td></td>
<td align="left"> 0x40 </td>
<td align="right"> the first segment in the template |</td>
</tr>
<tr>
<td></td>
<td align="left"> 0x80 </td>
<td align="right"> the last segment in the template |</td>
</tr>
<tr>
<td></td>
<td align="left"> 0x100 </td>
<td align="right"> secondary alignment |</td>
</tr>
<tr>
<td></td>
<td align="left"> 0x200 </td>
<td align="right"> not passing quality controls</td>
</tr>
<tr>
<td></td>
<td align="left"> 0x400 </td>
<td align="right"> PCR or optical duplicate |</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[samtools rmdup の挙動に関する実験]]></title>
    <link href="http://yuifu.github.io/blog/2013/07/18/samtools-rmdup/"/>
    <updated>2013-07-18T21:02:00+09:00</updated>
    <id>http://yuifu.github.io/blog/2013/07/18/samtools-rmdup</id>
    <content type="html"><![CDATA[<h2>samtools rmdup について</h2>

<p><code>samtools rmdup</code>は，potential PCR duplicates を除くのによく使われる便利なツールです．</p>

<p><a href="http://samtools.sourceforge.net/samtools.shtml">samtoolsの公式</a>では以下のように説明してあります．</p>

<blockquote><p>samtools rmdup [-sS] &lt;input.srt.bam> &lt;out.bam></p>

<p>Remove potential PCR duplicates: if multiple read pairs have identical external coordinates, only retain the pair with highest mapping quality. In the paired-end mode, this command ONLY works with FR orientation and requires ISIZE is correctly set. It does not work for unpaired reads (e.g. two ends mapped to different chromosomes or orphan reads).</p>

<p>OPTIONS:</p>

<p>-s      Remove duplicate for single-end reads. By default, the command works for paired-end reads only.</p>

<p>-S      Treat paired-end reads and single-end reads.</p></blockquote>

<p>しかし，この説明ではオプションを使った場合にどのような挙動をするのかよくわからなかっため，簡単な実験を行いました．</p>

<h2>実験</h2>

<p>まず，座標が同一な，ペアエンドのリード（ペアの両方または片方のみがマップされているもの）およびシングルエンドのリードから成るテストデータを作成しました．
リード名はそれぞれ以下の通り．</p>

<ul>
<li>test_pe_* はペアエンドでかつ両方のセグメントがマップされているリード（0x1）を表す</li>
<li>test1_peu_* はペアの片方のセグメントのみがマップされているリード（0x1と0x8）を表す</li>
<li>test_se_* はシングルエンドのリードを表す</li>
<li>末尾の0と1は，互いに同じ座標の異なるリードであることを示す</li>
</ul>


<p><code>
$ samtools view test.bam
test_pe_0     99     chr1     160502     50     101M     =     160543     142     TGGGCTTGCTCTGCTGGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACA     @@@FFFFFHHHGGHHJJIIJJIIJHIIIIJJJGHIJJJJJJJJIJHIJJJJJIJJJIGIJIJJIJIJJJIHHEBB==CBBBBBDDB&lt;BDDDDDD@BDDDD&gt;     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:92A2G5     YT:Z:UU     NH:i:1
test_pe_1     99     chr1     160502     50     101M     =     160543     142     TGGGCTTGCTCTGCTGGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACA     @@@FFFFFHHHGGHHJJIIJJIIJHIIIIJJJGHIJJJJJJJJIJHIJJJJJIJJJIGIJIJJIJIJJJIHHEBB==CBBBBBDDB&lt;BDDDDDD@BDDDD&gt;     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:92A2G5     YT:Z:UU     NH:i:1
test_se_0     0     chr1     160500     50     101M     *     0     0     GGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGC     @CCFFFFFGFHHHJJJJJJJJIJJJIJIJJJJJIJJJJJJJJJJJJJEHIHIJJJJJJIJJHHHHHHFDDDBDDDDDDD&gt;BDBDDDDDDDDDDDDDDDDDD     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:77A2G20     YT:Z:UU     NH:i:1
test_se_1     0     chr1     160500     50     101M     *     0     0     GGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGC     @CCFFFFFGFHHHJJJJJJJJIJJJIJIJJJJJIJJJJJJJJJJJJJEHIHIJJJJJJIJJHHHHHHFDDDBDDDDDDD&gt;BDBDDDDDDDDDDDDDDDDDD     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:77A2G20     YT:Z:UU     NH:i:1
test1_peu_0     137     chr1     160517     50     101M     *     0     0     GGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGC     @CCFFFFFGFHHHJJJJJJJJIJJJIJIJJJJJIJJJJJJJJJJJJJEHIHIJJJJJJIJJHHHHHHFDDDBDDDDDDD&gt;BDBDDDDDDDDDDDDDDDDDD     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:77A2G20     YT:Z:UU     NH:i:1
test1_peu_1     137     chr1     160517     50     101M     *     0     0     GGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGC     @CCFFFFFGFHHHJJJJJJJJIJJJIJIJJJJJIJJJJJJJJJJJJJEHIHIJJJJJJIJJHHHHHHFDDDBDDDDDDD&gt;BDBDDDDDDDDDDDDDDDDDD     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:77A2G20     YT:Z:UU     NH:i:1
test_pe_0     147     chr1     160543     50     101M     =     160502     -142     TCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGCCAGTTGATTGACAGCTCAACTGGTTG     &gt;CBBBDDBDDDDBA?CDDDEEDDDDDDDBBBDDBDDDDDDDFFHHFGGHDBJJIIHGIJIIHGGEGIIJJJJIGEIJJIJIJJJIHIJHHGDHDFFFD@C@     AS:i:-12     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:51A2G46     YT:Z:UU     NH:i:1
test_pe_1     147     chr1     160543     50     101M     =     160502     -142     TCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGCCAGTTGATTGACAGCTCAACTGGTTG     &gt;CBBBDDBDDDDBA?CDDDEEDDDDDDDBBBDDBDDDDDDDFFHHFGGHDBJJIIHGIJIIHGGEGIIJJJJIGEIJJIJIJJJIHIJHHGDHDFFFD@C@     AS:i:-12     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:51A2G46     YT:Z:UU     NH:i:1
</code></p>

<p>このテストデータに対して<code>samtools rmdup</code>を実行します．</p>

<p><code>
$ samtools rmdup test.bam test_rmdup.bam
$ samtools rmdup -s test.bam test_rmdup_s.bam
$ samtools rmdup -S test.bam test_rmdup_S.bam
</code></p>

<p>結果を見てみます．ここではSAM/BAMの１列目のリード名（QNAME）のみを出力しています．</p>

<p>```</p>

<h1>test.bam</h1>

<p>$ samtools view test.bam |awk &lsquo;{print $1}&rsquo;
test_pe_0
test_pe_1
test_se_0
test_se_1
test1_peu_0
test1_peu_1
test_pe_0
test_pe_1</p>

<h1>samtools rmdup したもの</h1>

<p>$ samtools view test_rmdup.bam |awk &lsquo;{print $1}&rsquo;
test_pe_0
test_se_0
test_se_1
test1_peu_0
test1_peu_1
test_pe_0</p>

<h1>samtools rmdup -s したもの</h1>

<p>$ samtools view test_rmdup_s.bam |awk &lsquo;{print $1}&rsquo;
test_pe_0
test_pe_1
test_se_0
test1_peu_0
test1_peu_1
test_pe_0
test_pe_1</p>

<h1>samtools rmdup -S したもの</h1>

<p>$ samtools view test_rmdup_S.bam |awk &lsquo;{print $1}&rsquo;
test_pe_0
test_se_0
test1_peu_0
test_pe_0
```</p>

<p>これらの結果から，</p>

<ul>
<li>ペアの両方のセグメントがマップされている場合（0x1），デフォルトのときと<code>-S</code>がついているとき除かれる．</li>
<li>ペアの片方のセグメントのみがマップされている場合（0x1と0x8），<code>-S</code>がついているとき除かれる</li>
<li>シングルエンドの場合，<code>-s</code>もしくは<code>-S</code>がついているとき除かれる</li>
</ul>


<p>ということが分かりました．</p>

<h2>なにが挙動を決めているのか</h2>

<p>ペアの片方のセグメントのみがマップされている場合に，デフォルトでは除かれないことがわかりました．最初は，FLAG列をみてペアエンドかどうかを判定していると思い込んでいたので驚きました．</p>

<p>テストデータの<code>test_pe_*</code>と<code>test1_peu_*</code>を眺めていると，後者では７列目が<code>*</code>となっていました（それまで気付いていませんでした…）．
SAM/BAMの7列目のRNEXTは<a href="http://samtools.sourceforge.net/SAM1.pdf">The SAM Format Specification (PDF)</a>によると，以下のような説明がなされています．</p>

<blockquote><p>If RNEXT is ‘*’, no assumptions can be made on PNEXT and bit 0x20.</p></blockquote>

<p>この記述から，rmdupは RNEXTとPNEXTのみを参照しているように思えたのでさらに実験しました．</p>

<p><code>
$ samtools view test2.bam
test_pe_0     99     chr1     160502     50     101M     *     0     0     TGGGCTTGCTCTGCTGGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACA     @@@FFFFFHHHGGHHJJIIJJIIJHIIIIJJJGHIJJJJJJJJIJHIJJJJJIJJJIGIJIJJIJIJJJIHHEBB==CBBBBBDDB&lt;BDDDDDD@BDDDD&gt;     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:92A2G5     YT:Z:UU     NH:i:1
test_pe_1     99     chr1     160502     50     101M     *     0     0     TGGGCTTGCTCTGCTGGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACA     @@@FFFFFHHHGGHHJJIIJJIIJHIIIIJJJGHIJJJJJJJJIJHIJJJJJIJJJIGIJIJJIJIJJJIHHEBB==CBBBBBDDB&lt;BDDDDDD@BDDDD&gt;     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:92A2G5     YT:Z:UU     NH:i:1
test_se_0     0     chr1     160500     50     101M     *     0     0     GGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGC     @CCFFFFFGFHHHJJJJJJJJIJJJIJIJJJJJIJJJJJJJJJJJJJEHIHIJJJJJJIJJHHHHHHFDDDBDDDDDDD&gt;BDBDDDDDDDDDDDDDDDDDD     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:77A2G20     YT:Z:UU     NH:i:1
test_se_1     0     chr1     160500     50     101M     *     0     0     GGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGC     @CCFFFFFGFHHHJJJJJJJJIJJJIJIJJJJJIJJJJJJJJJJJJJEHIHIJJJJJJIJJHHHHHHFDDDBDDDDDDD&gt;BDBDDDDDDDDDDDDDDDDDD     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:77A2G20     YT:Z:UU     NH:i:1
test1_peu_0     137     chr1     160517     50     101M     *     0     0     GGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGC     @CCFFFFFGFHHHJJJJJJJJIJJJIJIJJJJJIJJJJJJJJJJJJJEHIHIJJJJJJIJJHHHHHHFDDDBDDDDDDD&gt;BDBDDDDDDDDDDDDDDDDDD     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:77A2G20     YT:Z:UU     NH:i:1
test1_peu_1     137     chr1     160517     50     101M     *     0     0     GGAATGGAGATTTCGCTCTCAGCTTCTCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGC     @CCFFFFFGFHHHJJJJJJJJIJJJIJIJJJJJIJJJJJJJJJJJJJEHIHIJJJJJJIJJHHHHHHFDDDBDDDDDDD&gt;BDBDDDDDDDDDDDDDDDDDD     AS:i:-10     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:77A2G20     YT:Z:UU     NH:i:1
test_pe_0     147     chr1     160543     50     101M     *     0     0     TCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGCCAGTTGATTGACAGCTCAACTGGTTG     &gt;CBBBDDBDDDDBA?CDDDEEDDDDDDDBBBDDBDDDDDDDFFHHFGGHDBJJIIHGIJIIHGGEGIIJJJJIGEIJJIJIJJJIHIJHHGDHDFFFD@C@     AS:i:-12     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:51A2G46     YT:Z:UU     NH:i:1
test_pe_1     147     chr1     160543     50     101M     *     0     0     TCTGTCTGCCTCCTCTTCTCTGATATCGGTCCGAGTCGTGCGCCGTAAGGGGGTCGAACAGCTCTCCAGCGCAGCCAGTTGATTGACAGCTCAACTGGTTG     &gt;CBBBDDBDDDDBA?CDDDEEDDDDDDDBBBDDBDDDDDDDFFHHFGGHDBJJIIHGIJIIHGGEGIIJJJJIGEIJJIJIJJJIHIJHHGDHDFFFD@C@     AS:i:-12     XN:i:0     XM:i:2     XO:i:0     XG:i:0     NM:i:2     MD:Z:51A2G46     YT:Z:UU     NH:i:1
</code></p>

<p><code>
samtools rmdup test2.bam test_rmdup2.bam
samtools rmdup -s test2.bam test_rmdup_s2.bam
samtools rmdup -S test2.bam test_rmdup_S2.bam
</code></p>

<p>```</p>

<h1>test2.bam</h1>

<p>$ samtools view test2.bam |awk &lsquo;{print $1}&rsquo;
test_pe_0
test_pe_1
test_se_0
test_se_1
test1_peu_0
test1_peu_1
test_pe_0
test_pe_1</p>

<h1>samtools rmdup したとき</h1>

<p>$ samtools view test_2.bam |awk &lsquo;{print $1}&rsquo;
test_pe_0
test_pe_1
test_se_0
test_se_1
test1_peu_0
test1_peu_1
test_pe_0
test_pe_1</p>

<h1>samtools rmdup -s したとき</h1>

<p>$ samtools view test__s2.bam |awk &lsquo;{print $1}&rsquo;
test_pe_0
test_pe_1
test_se_0
test1_peu_0
test1_peu_1
test_pe_0
test_pe_1</p>

<h1>samtools rmdup -S したとき</h1>

<p>$ samtools view test__S2.bam |awk &lsquo;{print $1}&rsquo;
test_pe_0
test_se_0
test1_peu_0
test_pe_0
```</p>

<p>今度は，デフォルトのときでも，ペアの両方のセグメントがマップされているリードが除かれなくなりました．
このことから，ペアエンドのリードを除くかどうかの判定には，（FLAGは関係なく）RNEXTおよびPNEXTのみを参照していると考えられました．
一方で，<code>-s</code>のときに，ペアの片方のみマップされたリードが除かれないことから，シングルエンドの判定にはFLAGを使っていると考えられます．</p>

<h2>まとめ</h2>

<ul>
<li>デフォルト: ペアエンドでペアの両方がマップされるものについて，PCR duplicatesかどうかを判定する</li>
<li><code>-s</code>: FLAGで0x1 (template having multiple segments in sequencing) がセットされていないリードについて，PCR duplicatesかどうかを判定する</li>
<li><code>-S</code>: すべてのリードをシングルエンドとして，PCR duplicatesかどうかを判定する</li>
</ul>


<p>余談ですが，<a href="http://samtools.sourceforge.net/samtools.shtml">samtoolsの公式</a>には</p>

<blockquote><p>-S      Treat paired-end reads and single-end reads.</p></blockquote>

<p>と書いてある一方で，例えば<a href="https://wikis.utexas.edu/display/bioiteam/Removing+duplicates+from+alignment+output">こちらのページ</a>には</p>

<blockquote><p>-S      Treat paired-end reads as single-end reads.</p></blockquote>

<p>と書いてあり，この書き方の方が分かりやすい気がしました．</p>

<p>もし勘違いなどあれば，コメントか<a href="https://twitter.com/yuifu">twitter</a>でご指摘いただけると幸いです．</p>
]]></content>
  </entry>
  
</feed>
